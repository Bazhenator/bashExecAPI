// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Bazhenator/bashExecAPI/internal/service (interfaces: ICommand,IDataBase)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination mock/mock_service.go . ICommand,IDataBase
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	domain "github.com/Bazhenator/bashExecAPI/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockICommand is a mock of ICommand interface.
type MockICommand struct {
	ctrl     *gomock.Controller
	recorder *MockICommandMockRecorder
}

// MockICommandMockRecorder is the mock recorder for MockICommand.
type MockICommandMockRecorder struct {
	mock *MockICommand
}

// NewMockICommand creates a new mock instance.
func NewMockICommand(ctrl *gomock.Controller) *MockICommand {
	mock := &MockICommand{ctrl: ctrl}
	mock.recorder = &MockICommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICommand) EXPECT() *MockICommandMockRecorder {
	return m.recorder
}

// CreateCommand mocks base method.
func (m *MockICommand) CreateCommand(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommand", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCommand indicates an expected call of CreateCommand.
func (mr *MockICommandMockRecorder) CreateCommand(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommand", reflect.TypeOf((*MockICommand)(nil).CreateCommand), arg0, arg1)
}

// GetCommand mocks base method.
func (m *MockICommand) GetCommand(arg0 context.Context, arg1 int) (*domain.Command, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommand", arg0, arg1)
	ret0, _ := ret[0].(*domain.Command)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommand indicates an expected call of GetCommand.
func (mr *MockICommandMockRecorder) GetCommand(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommand", reflect.TypeOf((*MockICommand)(nil).GetCommand), arg0, arg1)
}

// ListCommands mocks base method.
func (m *MockICommand) ListCommands(arg0 context.Context) ([]domain.Command, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommands", arg0)
	ret0, _ := ret[0].([]domain.Command)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommands indicates an expected call of ListCommands.
func (mr *MockICommandMockRecorder) ListCommands(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommands", reflect.TypeOf((*MockICommand)(nil).ListCommands), arg0)
}

// RunCommand mocks base method.
func (m *MockICommand) RunCommand(arg0 context.Context, arg1 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunCommand", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunCommand indicates an expected call of RunCommand.
func (mr *MockICommandMockRecorder) RunCommand(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommand", reflect.TypeOf((*MockICommand)(nil).RunCommand), arg0, arg1)
}

// MockIDataBase is a mock of IDataBase interface.
type MockIDataBase struct {
	ctrl     *gomock.Controller
	recorder *MockIDataBaseMockRecorder
}

// MockIDataBaseMockRecorder is the mock recorder for MockIDataBase.
type MockIDataBaseMockRecorder struct {
	mock *MockIDataBase
}

// NewMockIDataBase creates a new mock instance.
func NewMockIDataBase(ctrl *gomock.Controller) *MockIDataBase {
	mock := &MockIDataBase{ctrl: ctrl}
	mock.recorder = &MockIDataBaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDataBase) EXPECT() *MockIDataBaseMockRecorder {
	return m.recorder
}

// DeleteAllRows mocks base method.
func (m *MockIDataBase) DeleteAllRows(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllRows", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllRows indicates an expected call of DeleteAllRows.
func (mr *MockIDataBaseMockRecorder) DeleteAllRows(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllRows", reflect.TypeOf((*MockIDataBase)(nil).DeleteAllRows), arg0)
}

// DeleteRow mocks base method.
func (m *MockIDataBase) DeleteRow(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRow", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRow indicates an expected call of DeleteRow.
func (mr *MockIDataBaseMockRecorder) DeleteRow(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRow", reflect.TypeOf((*MockIDataBase)(nil).DeleteRow), arg0, arg1)
}
