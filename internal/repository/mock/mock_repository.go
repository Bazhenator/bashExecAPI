// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Bazhenator/bashExecAPI/internal/repository (interfaces: ICommandRepository,IDataBaseRepository)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination mock/mock_repository.go . ICommandRepository,IDataBaseRepository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	domain "github.com/Bazhenator/bashExecAPI/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockICommandRepository is a mock of ICommandRepository interface.
type MockICommandRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICommandRepositoryMockRecorder
}

// MockICommandRepositoryMockRecorder is the mock recorder for MockICommandRepository.
type MockICommandRepositoryMockRecorder struct {
	mock *MockICommandRepository
}

// NewMockICommandRepository creates a new mock instance.
func NewMockICommandRepository(ctrl *gomock.Controller) *MockICommandRepository {
	mock := &MockICommandRepository{ctrl: ctrl}
	mock.recorder = &MockICommandRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICommandRepository) EXPECT() *MockICommandRepositoryMockRecorder {
	return m.recorder
}

// CreateCommand mocks base method.
func (m *MockICommandRepository) CreateCommand(arg0 context.Context, arg1 string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommand", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCommand indicates an expected call of CreateCommand.
func (mr *MockICommandRepositoryMockRecorder) CreateCommand(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommand", reflect.TypeOf((*MockICommandRepository)(nil).CreateCommand), arg0, arg1)
}

// GetCommand mocks base method.
func (m *MockICommandRepository) GetCommand(arg0 context.Context, arg1 int) (*domain.Command, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommand", arg0, arg1)
	ret0, _ := ret[0].(*domain.Command)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommand indicates an expected call of GetCommand.
func (mr *MockICommandRepositoryMockRecorder) GetCommand(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommand", reflect.TypeOf((*MockICommandRepository)(nil).GetCommand), arg0, arg1)
}

// ListCommands mocks base method.
func (m *MockICommandRepository) ListCommands(arg0 context.Context) ([]domain.Command, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommands", arg0)
	ret0, _ := ret[0].([]domain.Command)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommands indicates an expected call of ListCommands.
func (mr *MockICommandRepositoryMockRecorder) ListCommands(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommands", reflect.TypeOf((*MockICommandRepository)(nil).ListCommands), arg0)
}

// RunCommand mocks base method.
func (m *MockICommandRepository) RunCommand(arg0 context.Context, arg1 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunCommand", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunCommand indicates an expected call of RunCommand.
func (mr *MockICommandRepositoryMockRecorder) RunCommand(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommand", reflect.TypeOf((*MockICommandRepository)(nil).RunCommand), arg0, arg1)
}

// MockIDataBaseRepository is a mock of IDataBaseRepository interface.
type MockIDataBaseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIDataBaseRepositoryMockRecorder
}

// MockIDataBaseRepositoryMockRecorder is the mock recorder for MockIDataBaseRepository.
type MockIDataBaseRepositoryMockRecorder struct {
	mock *MockIDataBaseRepository
}

// NewMockIDataBaseRepository creates a new mock instance.
func NewMockIDataBaseRepository(ctrl *gomock.Controller) *MockIDataBaseRepository {
	mock := &MockIDataBaseRepository{ctrl: ctrl}
	mock.recorder = &MockIDataBaseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDataBaseRepository) EXPECT() *MockIDataBaseRepositoryMockRecorder {
	return m.recorder
}

// DeleteAllRows mocks base method.
func (m *MockIDataBaseRepository) DeleteAllRows(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllRows", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllRows indicates an expected call of DeleteAllRows.
func (mr *MockIDataBaseRepositoryMockRecorder) DeleteAllRows(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllRows", reflect.TypeOf((*MockIDataBaseRepository)(nil).DeleteAllRows), arg0)
}

// DeleteRow mocks base method.
func (m *MockIDataBaseRepository) DeleteRow(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRow", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRow indicates an expected call of DeleteRow.
func (mr *MockIDataBaseRepositoryMockRecorder) DeleteRow(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRow", reflect.TypeOf((*MockIDataBaseRepository)(nil).DeleteRow), arg0, arg1)
}
